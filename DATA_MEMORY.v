// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\EdgeDetectionAndOverlayHDL\DATA_MEMORY.v
// Created: 2023-11-17 13:10:32
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: DATA_MEMORY
// Source Path: EdgeDetectionAndOverlayHDL/Pixel-Stream HDL Model/Edge Detection/Edge Detector/LineBuffer/DATA_MEMORY
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module DATA_MEMORY
          (clk,
           reset,
           enb,
           Unloading,
           hStartIn,
           hEndIn,
           validIn,
           popEn,
           AllAtEnd);


  input   clk;
  input   reset;
  input   enb;
  input   Unloading;
  input   hStartIn;
  input   hEndIn;
  input   validIn;
  input   [1:0] popEn;  // ufix2
  output  AllAtEnd;


  reg  validREG;
  reg  unloadPop;
  reg  hEndREG;
  reg  hEndREGT;
  wire unloadPopT;
  wire validPop;
  wire PopEnSL;
  wire [10:0] writeAddr1;  // ufix11
  wire EndofLine1;
  wire PopEnSL_1;
  wire EndofLine2;


  always @(posedge clk or posedge reset)
    begin : reg_rsvd_process
      if (reset == 1'b1) begin
        validREG <= 1'b0;
      end
      else begin
        if (enb) begin
          validREG <= validIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_1_process
      if (reset == 1'b1) begin
        unloadPop <= 1'b0;
      end
      else begin
        if (enb) begin
          unloadPop <= validREG;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_2_process
      if (reset == 1'b1) begin
        hEndREG <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndREG <= hEndIn;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reg_rsvd_3_process
      if (reset == 1'b1) begin
        hEndREGT <= 1'b0;
      end
      else begin
        if (enb) begin
          hEndREGT <= hEndREG;
        end
      end
    end



  assign unloadPopT = hEndREGT & (unloadPop & Unloading);



  assign validPop = validREG | unloadPopT;



  assign PopEnSL = popEn[0];



  PushPopCounterOne u_PushPopCounterOne (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .hStartIn(hStartIn),
                                         .popIn(validPop),
                                         .popEnable(PopEnSL),
                                         .hEndIn(hEndREG),
                                         .wrAddr(writeAddr1),  // ufix11
                                         .EndofLine(EndofLine1)
                                         );

  assign PopEnSL_1 = popEn[0];



  PushPopCounter u_PushPopCounter2 (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .hStartIn(hStartIn),
                                    .popIn(validPop),
                                    .popEnable(PopEnSL_1),
                                    .hEndIn(hEndREG),
                                    .writeCountPrev(writeAddr1),  // ufix11
                                    .EndofLine(EndofLine2)
                                    );

  assign AllAtEnd = EndofLine1 & EndofLine2;



endmodule  // DATA_MEMORY

